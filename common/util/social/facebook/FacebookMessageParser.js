"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const LOG = require("../../../util/logging");
const log = LOG.log('Facebook Profile Helper');
class FacebookMessage {
    constructor(requestId, senderId, receiverId, messageId) {
        this.messageId = messageId;
        this.requestId = requestId;
        this.senderId = senderId;
        this.receiverId = receiverId;
    }
}
exports.FacebookMessage = FacebookMessage;
class FacebookTextMessage extends FacebookMessage {
    constructor(requestId, senderId, receiverId, messageId, text) {
        super(requestId, senderId, receiverId, messageId);
        this.text = text;
    }
}
exports.FacebookTextMessage = FacebookTextMessage;
class FacebookAttachment extends FacebookMessage {
    constructor(requestId, senderId, receiverId, messageId, url, attachmentType) {
        super(requestId, senderId, receiverId, messageId);
        this.url = url;
        this.attachmentType = attachmentType;
    }
}
exports.FacebookAttachment = FacebookAttachment;
class FacebookQuickReply extends FacebookMessage {
    constructor(requestId, senderId, receiverId, messageId, payload) {
        super(requestId, senderId, receiverId, messageId);
        this.payload = JSON.parse(payload);
    }
}
exports.FacebookQuickReply = FacebookQuickReply;
class FacebookMessageParser {
    constructor() {
    }
    parseMessage(message) {
        log.debug('Parsing message with payload: %s', JSON.stringify(message));
        let res = [];
        message.entry.forEach((item) => {
            //console.log(item);
            if (item.messaging) {
                item.messaging.forEach((messageObject) => {
                    if (!messageObject.message) {
                        return;
                    }
                    if (messageObject.message.quick_reply) {
                        let quickReplyMessage = new FacebookQuickReply(item.id, messageObject.sender.id, messageObject.recipient.id, messageObject.message.mid, messageObject.message.quick_reply.payload);
                        res.push(quickReplyMessage);
                    }
                    else {
                        let textMessage = new FacebookTextMessage(item.id, messageObject.sender.id, messageObject.recipient.id, messageObject.message.mid, messageObject.message.text);
                        res.push(textMessage);
                    }
                    if (messageObject.message.attachments) {
                        let textMessage = new FacebookAttachment(item.id, messageObject.sender.id, messageObject.recipient.id, messageObject.message.mid, messageObject.message.attachments[0].payload.url, messageObject.message.attachments[0].type);
                        res.push(textMessage);
                    }
                });
            }
        });
        log.debug('Returning parsing result %s', JSON.stringify(res));
        return res;
    }
    ;
}
exports.default = FacebookMessageParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmFjZWJvb2tNZXNzYWdlUGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRmFjZWJvb2tNZXNzYWdlUGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsYUFBYTtBQUNiLDZDQUE4QztBQUM5QyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFHL0MsTUFBc0IsZUFBZTtJQU9uQyxZQUFZLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxVQUFrQixFQUFFLFNBQWlCO1FBQ3BGLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQy9CLENBQUM7Q0FFRjtBQWRELDBDQWNDO0FBRUQsTUFBYSxtQkFBb0IsU0FBUSxlQUFlO0lBSXRELFlBQVksU0FBaUIsRUFBRSxRQUFnQixFQUFFLFVBQWtCLEVBQUUsU0FBaUIsRUFBRSxJQUFZO1FBQ2xHLEtBQUssQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFSRCxrREFRQztBQUVELE1BQWEsa0JBQW1CLFNBQVEsZUFBZTtJQUtyRCxZQUFZLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxVQUFrQixFQUFFLFNBQWlCLEVBQUUsR0FBVyxFQUFFLGNBQXNCO1FBQ3pILEtBQUssQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0lBQ3ZDLENBQUM7Q0FDRjtBQVZELGdEQVVDO0FBR0QsTUFBYSxrQkFBbUIsU0FBUSxlQUFlO0lBSXJELFlBQVksU0FBaUIsRUFBRSxRQUFnQixFQUFFLFVBQWtCLEVBQUUsU0FBaUIsRUFBRSxPQUFlO1FBQ3JHLEtBQUssQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNGO0FBUkQsZ0RBUUM7QUFHRCxNQUFxQixxQkFBcUI7SUFFeEM7SUFFQSxDQUFDO0lBRUQsWUFBWSxDQUFDLE9BQVk7UUFHdkIsR0FBRyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFdkUsSUFBSSxHQUFHLEdBQXNCLEVBQUUsQ0FBQztRQUVoQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQ2xDLG9CQUFvQjtZQUNwQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsYUFBa0IsRUFBRSxFQUFFO29CQUU1QyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRTt3QkFDMUIsT0FBTztxQkFDUjtvQkFFRCxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFO3dCQUNyQyxJQUFJLGlCQUFpQixHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQzt3QkFDbkwsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO3FCQUM3Qjt5QkFBTTt3QkFDTCxJQUFJLFdBQVcsR0FBRyxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDL0osR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztxQkFDdkI7b0JBQ0QsSUFBRyxhQUFhLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBQzt3QkFDbkMsSUFBSSxXQUFXLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQy9OLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7cUJBQ3ZCO2dCQUNILENBQUMsQ0FBQyxDQUFDO2FBQ0o7UUFFSCxDQUFDLENBQUMsQ0FBQztRQUVILEdBQUcsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRTlELE9BQU8sR0FBRyxDQUFDO0lBRWIsQ0FBQztJQUFBLENBQUM7Q0FHSDtBQTdDRCx3Q0E2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtaWdub3JlXG5pbXBvcnQgTE9HID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC9sb2dnaW5nJyk7XG5jb25zdCBsb2cgPSBMT0cubG9nKCdGYWNlYm9vayBQcm9maWxlIEhlbHBlcicpO1xuXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGYWNlYm9va01lc3NhZ2Uge1xuXG4gIHJlcXVlc3RJZDogc3RyaW5nO1xuICBzZW5kZXJJZDogc3RyaW5nO1xuICByZWNlaXZlcklkOiBzdHJpbmc7XG4gIG1lc3NhZ2VJZDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHJlcXVlc3RJZDogc3RyaW5nLCBzZW5kZXJJZDogc3RyaW5nLCByZWNlaXZlcklkOiBzdHJpbmcsIG1lc3NhZ2VJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdlSWQgPSBtZXNzYWdlSWQ7XG4gICAgdGhpcy5yZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gICAgdGhpcy5zZW5kZXJJZCA9IHNlbmRlcklkO1xuICAgIHRoaXMucmVjZWl2ZXJJZCA9IHJlY2VpdmVySWQ7XG4gIH1cblxufVxuXG5leHBvcnQgY2xhc3MgRmFjZWJvb2tUZXh0TWVzc2FnZSBleHRlbmRzIEZhY2Vib29rTWVzc2FnZSB7XG5cbiAgdGV4dDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHJlcXVlc3RJZDogc3RyaW5nLCBzZW5kZXJJZDogc3RyaW5nLCByZWNlaXZlcklkOiBzdHJpbmcsIG1lc3NhZ2VJZDogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpIHtcbiAgICBzdXBlcihyZXF1ZXN0SWQsIHNlbmRlcklkLCByZWNlaXZlcklkLCBtZXNzYWdlSWQpO1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZhY2Vib29rQXR0YWNobWVudCBleHRlbmRzIEZhY2Vib29rTWVzc2FnZSB7XG5cbiAgdXJsOiBzdHJpbmc7XG4gIGF0dGFjaG1lbnRUeXBlOnN0cmluZztcblxuICBjb25zdHJ1Y3RvcihyZXF1ZXN0SWQ6IHN0cmluZywgc2VuZGVySWQ6IHN0cmluZywgcmVjZWl2ZXJJZDogc3RyaW5nLCBtZXNzYWdlSWQ6IHN0cmluZywgdXJsOiBzdHJpbmcsIGF0dGFjaG1lbnRUeXBlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihyZXF1ZXN0SWQsIHNlbmRlcklkLCByZWNlaXZlcklkLCBtZXNzYWdlSWQpO1xuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIHRoaXMuYXR0YWNobWVudFR5cGUgPSBhdHRhY2htZW50VHlwZTtcbiAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBGYWNlYm9va1F1aWNrUmVwbHkgZXh0ZW5kcyBGYWNlYm9va01lc3NhZ2Uge1xuXG4gIHBheWxvYWQ6IGFueTtcblxuICBjb25zdHJ1Y3RvcihyZXF1ZXN0SWQ6IHN0cmluZywgc2VuZGVySWQ6IHN0cmluZywgcmVjZWl2ZXJJZDogc3RyaW5nLCBtZXNzYWdlSWQ6IHN0cmluZywgcGF5bG9hZDogc3RyaW5nKSB7XG4gICAgc3VwZXIocmVxdWVzdElkLCBzZW5kZXJJZCwgcmVjZWl2ZXJJZCwgbWVzc2FnZUlkKTtcbiAgICB0aGlzLnBheWxvYWQgPSBKU09OLnBhcnNlKHBheWxvYWQpO1xuICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmFjZWJvb2tNZXNzYWdlUGFyc2VyIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICB9XG5cbiAgcGFyc2VNZXNzYWdlKG1lc3NhZ2U6IGFueSk6IEZhY2Vib29rTWVzc2FnZVtdIHtcblxuXG4gICAgbG9nLmRlYnVnKCdQYXJzaW5nIG1lc3NhZ2Ugd2l0aCBwYXlsb2FkOiAlcycsIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcblxuICAgIGxldCByZXM6IEZhY2Vib29rTWVzc2FnZVtdID0gW107XG5cbiAgICBtZXNzYWdlLmVudHJ5LmZvckVhY2goKGl0ZW06IGFueSkgPT4ge1xuICAgICAgLy9jb25zb2xlLmxvZyhpdGVtKTtcbiAgICAgIGlmIChpdGVtLm1lc3NhZ2luZykge1xuICAgICAgICBpdGVtLm1lc3NhZ2luZy5mb3JFYWNoKChtZXNzYWdlT2JqZWN0OiBhbnkpID0+IHtcblxuICAgICAgICAgIGlmICghbWVzc2FnZU9iamVjdC5tZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG1lc3NhZ2VPYmplY3QubWVzc2FnZS5xdWlja19yZXBseSkge1xuICAgICAgICAgICAgbGV0IHF1aWNrUmVwbHlNZXNzYWdlID0gbmV3IEZhY2Vib29rUXVpY2tSZXBseShpdGVtLmlkLCBtZXNzYWdlT2JqZWN0LnNlbmRlci5pZCwgbWVzc2FnZU9iamVjdC5yZWNpcGllbnQuaWQsIG1lc3NhZ2VPYmplY3QubWVzc2FnZS5taWQsIG1lc3NhZ2VPYmplY3QubWVzc2FnZS5xdWlja19yZXBseS5wYXlsb2FkKTtcbiAgICAgICAgICAgIHJlcy5wdXNoKHF1aWNrUmVwbHlNZXNzYWdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRleHRNZXNzYWdlID0gbmV3IEZhY2Vib29rVGV4dE1lc3NhZ2UoaXRlbS5pZCwgbWVzc2FnZU9iamVjdC5zZW5kZXIuaWQsIG1lc3NhZ2VPYmplY3QucmVjaXBpZW50LmlkLCBtZXNzYWdlT2JqZWN0Lm1lc3NhZ2UubWlkLCBtZXNzYWdlT2JqZWN0Lm1lc3NhZ2UudGV4dCk7XG4gICAgICAgICAgICByZXMucHVzaCh0ZXh0TWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKG1lc3NhZ2VPYmplY3QubWVzc2FnZS5hdHRhY2htZW50cyl7XG4gICAgICAgICAgICBsZXQgdGV4dE1lc3NhZ2UgPSBuZXcgRmFjZWJvb2tBdHRhY2htZW50KGl0ZW0uaWQsIG1lc3NhZ2VPYmplY3Quc2VuZGVyLmlkLCBtZXNzYWdlT2JqZWN0LnJlY2lwaWVudC5pZCwgbWVzc2FnZU9iamVjdC5tZXNzYWdlLm1pZCwgbWVzc2FnZU9iamVjdC5tZXNzYWdlLmF0dGFjaG1lbnRzWzBdLnBheWxvYWQudXJsLCBtZXNzYWdlT2JqZWN0Lm1lc3NhZ2UuYXR0YWNobWVudHNbMF0udHlwZSk7XG4gICAgICAgICAgICByZXMucHVzaCh0ZXh0TWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgbG9nLmRlYnVnKCdSZXR1cm5pbmcgcGFyc2luZyByZXN1bHQgJXMnLCBKU09OLnN0cmluZ2lmeShyZXMpKTtcblxuICAgIHJldHVybiByZXM7XG5cbiAgfTtcblxuXG59XG4iXX0=