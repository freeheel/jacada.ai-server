"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class FacebookMessage {
    constructor(requestId, senderId, receiverId, messageId) {
        this.messageId = messageId;
        this.requestId = requestId;
        this.senderId = senderId;
        this.receiverId = receiverId;
    }
}
exports.FacebookMessage = FacebookMessage;
class FacebookTextMessage extends FacebookMessage {
    constructor(requestId, senderId, receiverId, messageId, text) {
        super(requestId, senderId, receiverId, messageId);
        this.text = text;
    }
}
exports.FacebookTextMessage = FacebookTextMessage;
class FacebookQuickReply extends FacebookMessage {
    constructor(requestId, senderId, receiverId, messageId, payload) {
        super(requestId, senderId, receiverId, messageId);
        this.payload = JSON.parse(payload);
    }
}
exports.FacebookQuickReply = FacebookQuickReply;
class FacebookMessageParser {
    constructor() {
    }
    parseMessage(message) {
        let res = [];
        message.entry.forEach((item) => {
            if (item.messaging) {
                item.messaging.forEach((messageObject) => {
                    if (!messageObject.message) {
                        return;
                    }
                    if (messageObject.message.quick_reply) {
                        let quickReplyMessage = new FacebookQuickReply(item.id, messageObject.sender.id, messageObject.recipient.id, messageObject.message.mid, messageObject.message.quick_reply.payload);
                        res.push(quickReplyMessage);
                    }
                    else {
                        let textMessage = new FacebookTextMessage(item.id, messageObject.sender.id, messageObject.recipient.id, messageObject.message.mid, messageObject.message.text);
                        res.push(textMessage);
                    }
                });
            }
        });
        return res;
    }
    ;
}
exports.default = FacebookMessageParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmFjZWJvb2tNZXNzYWdlUGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRmFjZWJvb2tNZXNzYWdlUGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBc0IsZUFBZTtJQU9uQyxZQUFZLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxVQUFrQixFQUFFLFNBQWlCO1FBQ3BGLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQy9CLENBQUM7Q0FFRjtBQWRELDBDQWNDO0FBRUQsTUFBYSxtQkFBb0IsU0FBUSxlQUFlO0lBSXRELFlBQVksU0FBaUIsRUFBRSxRQUFnQixFQUFFLFVBQWtCLEVBQUUsU0FBaUIsRUFBRSxJQUFZO1FBQ2xHLEtBQUssQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFSRCxrREFRQztBQUVELE1BQWEsa0JBQW1CLFNBQVEsZUFBZTtJQUlyRCxZQUFZLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxVQUFrQixFQUFFLFNBQWlCLEVBQUUsT0FBZTtRQUNyRyxLQUFLLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Q0FDRjtBQVJELGdEQVFDO0FBR0QsTUFBcUIscUJBQXFCO0lBRXhDO0lBRUEsQ0FBQztJQUVELFlBQVksQ0FBQyxPQUFZO1FBRXZCLElBQUksR0FBRyxHQUFzQixFQUFFLENBQUM7UUFFaEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtZQUVsQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsYUFBa0IsRUFBRSxFQUFFO29CQUM1QyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRTt3QkFDMUIsT0FBTztxQkFDUjtvQkFFRCxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFO3dCQUNyQyxJQUFJLGlCQUFpQixHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQTt3QkFDbEwsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO3FCQUM3Qjt5QkFBTTt3QkFDTCxJQUFJLFdBQVcsR0FBRyxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTt3QkFDOUosR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztxQkFDdkI7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7YUFDSjtRQUVILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLENBQUM7SUFFYixDQUFDO0lBQUEsQ0FBQztDQUdIO0FBbkNELHdDQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGYWNlYm9va01lc3NhZ2Uge1xuXG4gIHJlcXVlc3RJZDogc3RyaW5nO1xuICBzZW5kZXJJZDogc3RyaW5nO1xuICByZWNlaXZlcklkOiBzdHJpbmc7XG4gIG1lc3NhZ2VJZDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHJlcXVlc3RJZDogc3RyaW5nLCBzZW5kZXJJZDogc3RyaW5nLCByZWNlaXZlcklkOiBzdHJpbmcsIG1lc3NhZ2VJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdlSWQgPSBtZXNzYWdlSWQ7XG4gICAgdGhpcy5yZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gICAgdGhpcy5zZW5kZXJJZCA9IHNlbmRlcklkO1xuICAgIHRoaXMucmVjZWl2ZXJJZCA9IHJlY2VpdmVySWQ7XG4gIH1cblxufVxuXG5leHBvcnQgY2xhc3MgRmFjZWJvb2tUZXh0TWVzc2FnZSBleHRlbmRzIEZhY2Vib29rTWVzc2FnZSB7XG5cbiAgdGV4dDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHJlcXVlc3RJZDogc3RyaW5nLCBzZW5kZXJJZDogc3RyaW5nLCByZWNlaXZlcklkOiBzdHJpbmcsIG1lc3NhZ2VJZDogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpIHtcbiAgICBzdXBlcihyZXF1ZXN0SWQsIHNlbmRlcklkLCByZWNlaXZlcklkLCBtZXNzYWdlSWQpO1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZhY2Vib29rUXVpY2tSZXBseSBleHRlbmRzIEZhY2Vib29rTWVzc2FnZSB7XG5cbiAgcGF5bG9hZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHJlcXVlc3RJZDogc3RyaW5nLCBzZW5kZXJJZDogc3RyaW5nLCByZWNlaXZlcklkOiBzdHJpbmcsIG1lc3NhZ2VJZDogc3RyaW5nLCBwYXlsb2FkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihyZXF1ZXN0SWQsIHNlbmRlcklkLCByZWNlaXZlcklkLCBtZXNzYWdlSWQpO1xuICAgIHRoaXMucGF5bG9hZCA9IEpTT04ucGFyc2UocGF5bG9hZCk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGYWNlYm9va01lc3NhZ2VQYXJzZXIge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH1cblxuICBwYXJzZU1lc3NhZ2UobWVzc2FnZTogYW55KTogRmFjZWJvb2tNZXNzYWdlW10ge1xuXG4gICAgbGV0IHJlczogRmFjZWJvb2tNZXNzYWdlW10gPSBbXTtcblxuICAgIG1lc3NhZ2UuZW50cnkuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG5cbiAgICAgIGlmIChpdGVtLm1lc3NhZ2luZykge1xuICAgICAgICBpdGVtLm1lc3NhZ2luZy5mb3JFYWNoKChtZXNzYWdlT2JqZWN0OiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAoIW1lc3NhZ2VPYmplY3QubWVzc2FnZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtZXNzYWdlT2JqZWN0Lm1lc3NhZ2UucXVpY2tfcmVwbHkpIHtcbiAgICAgICAgICAgIGxldCBxdWlja1JlcGx5TWVzc2FnZSA9IG5ldyBGYWNlYm9va1F1aWNrUmVwbHkoaXRlbS5pZCwgbWVzc2FnZU9iamVjdC5zZW5kZXIuaWQsIG1lc3NhZ2VPYmplY3QucmVjaXBpZW50LmlkLCBtZXNzYWdlT2JqZWN0Lm1lc3NhZ2UubWlkLCBtZXNzYWdlT2JqZWN0Lm1lc3NhZ2UucXVpY2tfcmVwbHkucGF5bG9hZClcbiAgICAgICAgICAgIHJlcy5wdXNoKHF1aWNrUmVwbHlNZXNzYWdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRleHRNZXNzYWdlID0gbmV3IEZhY2Vib29rVGV4dE1lc3NhZ2UoaXRlbS5pZCwgbWVzc2FnZU9iamVjdC5zZW5kZXIuaWQsIG1lc3NhZ2VPYmplY3QucmVjaXBpZW50LmlkLCBtZXNzYWdlT2JqZWN0Lm1lc3NhZ2UubWlkLCBtZXNzYWdlT2JqZWN0Lm1lc3NhZ2UudGV4dClcbiAgICAgICAgICAgIHJlcy5wdXNoKHRleHRNZXNzYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzO1xuXG4gIH07XG5cblxufVxuIl19